ADVANCED OBJECTS
Review
Congratulations on finishing Advanced Objects!

Let’s review the concepts covered in this lesson:

The object that a method belongs to is called the calling object.
The this keyword refers to the calling object and can be used to access properties of the calling object.
Methods do not automatically have access to other internal properties of the calling object.
The value of this depends on where the this is being accessed from.
We cannot use arrow functions as methods if we want to access other internal properties.
JavaScript objects do not have built-in privacy, rather there are conventions to follow to notify other developers about the intent of the code.
The usage of an underscore before a property name means that the original developer did not intend for that property to be directly changed.
Setters and getter methods allow for more detailed ways of accessing and assigning properties.
Factory functions allow us to create object instances quickly and repeatedly.
There are different ways to use object destructuring: one way is the property value shorthand and another is destructured assignment.
As with any concept, it is a good skill to learn how to use the documentation with objects!
You’re ready to start leveraging more elegant code for creating and accessing objects in your code!



How can we add a property to the object below?
bikes['specialized'] = 'red';

Which of the following is an example of destructured assignment?
let {name} = myDog;

What is a factory function?
A function that returns an object.

Which of the following Object methods can be used to copy all of the properties of an object into a new object?
Object.assign();

What’s wrong with setter method in the example below?
The setter should contain this._num in place of _num

What will the following code output?
numDoors
isDirty
color

Which line of code would NOT print the value saved to the _num key in the tempObj object.
console.log(tempObj.num());

Given the following code, which expression will evaluate to apples?
refrigerator['produce drawer'].fruit[0]

What is a method?
A method is a property with a function as its value.

What should we add to the empty .withDiscount() method to return the cost of the meatballs object with a two dollar discount?
return this.cost - 2;

Which of the following statements is correct?
Objects store unordered data of any type as key-value pairs.